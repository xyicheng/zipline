Development
-----------

:Release: 1.0.0
:Date: TBD

.. warning::
   This release is still under active development.  All changes listed are
   subject to change at any time.


Highlights
~~~~~~~~~~

* We have rewritten a lot of Zipline and its basic concepts in order to
improve runtime performance.  At the same time, we've introduced
several new APIs.

At a high level, earlier versions of Zipline simulations pulled from a
multiplexed stream of data sources, which were merged via heapq.  This
stream was fed to the main simulation loop, driving the clock forward.  This
strong dependency on reading all the data made it difficult to optimize
simulation performance because there was no connection between the amount of
data we fetched and the amount of data actually used by the algorithm.

Now, we only fetch data when the algorithm needs it.  A new class,
`zipline.data.data_portal.DataPortal`, dispatches data requests to various
data sources and returns the requested values.  This makes the runtime of a
simulation scale much more closely with the complexity of the algorithm, rather
than with the number of assets provided by the data sources.

Instead of the data stream driving the clock, now simulations iterate through
a pre-calculated set of day or minute timestamps.  The timestamps are emitted
by `MinuteSimulationClock` and `DailySimulationClock`, and consumed by the
main loop in `AlgorithmSimulator.transform`.

We've retired the `data[sid(N)]` and `history` APIs, replacing them with
several methods on the `BarData` object: `data.current`, `data.history`,
`data.can_trade`, and `data.is_stale`.  Old APIs will continue to work for
now, but will issue deprecation warnings.

You can now pass in an adjustments source to the DataPortal, and we will
apply adjustments to the pricing data when looking backwards at data. Prices
and volumes for execution and presented to the algorithm in data.current are
the as-traded value of the asset.

Fetcher has been moved from Quantopian internal code into Zipline.


Enhancements
~~~~~~~~~~~~

* Made the data loading classes have more consistent interfaces. This includes
  the equity bar writers, adjustment writer, and asset db writer. The new
  interface is that the resource to be written to is passed at construction time
  and the data to write is provided later to the `write` method as a
  dataframe. This model allows us to pass these writer objects around as a
  resource for other classes and functions to consume (:issue:`1109`).

* Added masking to :class:`zipline.pipeline.CustomFactor`.
  Custom factors can now be passed a Filter upon instantiation. This tells the
  factor to only compute over stocks for which the filter returns True, rather
  than always computing over the entire universe of stocks. (:issue:`1095`)

* Added :class:`zipline.utils.cache.ExpiringCache`.
  A cache which wraps entries in a :class:`zipline.utils.cache.CachedObject`,
  which manages expiration of entries based on the `dt` supplied to the `get`
  method. (:issue:`1130`)

* Implemented :class:`zipline.pipeline.factors.RecarrayField`, a new pipeline
  term designed to be the output type of a CustomFactor with multiple outputs.
  (:issue:`1119`)

* Added optional `outputs` parameter to :class:`zipline.pipeline.CustomFactor`.
  Custom factors are now capable of computing and returning multiple outputs,
  each of which are themselves a Factor. (:issue:`1119`)

Experimental Features
~~~~~~~~~~~~~~~~~~~~~

.. warning::

   Experimental features are subject to change.

None

Bug Fixes
~~~~~~~~~

None

Performance
~~~~~~~~~~~

None

Maintenance and Refactorings
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

None

Build
~~~~~

None

Documentation
~~~~~~~~~~~~~

None

Miscellaneous
~~~~~~~~~~~~~

None
